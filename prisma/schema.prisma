// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "cockroachdb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  
    access_token      String?  
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          ROLES @default(PARTICIPANT)
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    accounts      Account[]
    sessions      Session[]
    points1        Int       @default(0)
    points2        Int       @default(0)
    minusPoints1   Int       @default(0)
    minusPoints2   Int       @default(0)
    roundOne      RoundOne?
    roundTwo      RoundTwo?
	zipFile		  FileAssigned? 
    ROneHints     Json? 
    RTwoHints     Json?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model MailBox {
    id        String  @id @default(cuid())
    name      String
    subject   String
    body      String
    publicUrl String?
    updatedAt DateTime @updatedAt
}

model RoundOne {
    id             BigInt      @id @default(autoincrement())
    userId         String   @unique
    hiddenRoute    String?
    loginRoute    String?
    shifts         String?
    playfairKey    String?
    passcode       String?
    captchaSolved  Boolean?
    hackerName     String?
    hackerLocation String?
    hackerPin      String?
    directEntry    String?
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
	user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RoundTwo {
    id          BigInt      @id @default(autoincrement())
    userId      String   @unique
    firstWord   String?
    secondWord  String?
    thirdWord   String?
    latitude    String?
    longitude   String?
    hexahue     String?
    asciiResult String?
    badge       String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FileAssigned{
	id BigInt @id @default(autoincrement())
	userId String @unique
	hash String
	fileId String
	user User	@relation(fields: [userId], references: [id])

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}
enum ROLES {
    ORGANIZER
    PARTICIPANT
}
